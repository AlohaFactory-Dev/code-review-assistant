import type { PromptTemplate, ReviewContext } from "../types";
import { BasePromptTemplate } from "./base";

export class NextJsPromptTemplate implements PromptTemplate {
	generatePrompt(context: ReviewContext): string {
		// Start with the base prompt
		const basePrompt = new BasePromptTemplate().generatePrompt(context);

		// Add Next.js-specific guidance
		return `${basePrompt}

Next.js 프로젝트 관련 추가 지침:

1. 아키텍처 및 컴포넌트 설계:
   - 컴포넌트 분리: 컴포넌트가 단일 책임 원칙을 따르고 있는지 확인하고, 과도하게 큰 컴포넌트의 분리를 제안하세요.
   - 폴더 구조: 프로젝트 구조가 기능별, 도메인별로 잘 구성되어 있는지 평가하세요.
   - 코드 재사용: 중복 로직을 식별하고 커스텀 훅, 유틸리티 함수 또는 공통 컴포넌트로의 추출을 권장하세요.
   - 일관된 패턴: 컴포넌트 패턴(Compound, Render Props, HOC)이 일관되게 적용되었는지 확인하세요.
   - 합성 모델: 복잡한 상속 대신 컴포넌트 합성을 권장하세요.

2. 서버 컴포넌트와 클라이언트 컴포넌트:
   - 적절한 분리: "use client" 지시어의 적절한 사용과 서버/클라이언트 컴포넌트 경계를 검토하세요.
   - 데이터 흐름: 서버 컴포넌트에서 클라이언트 컴포넌트로의 데이터 전달 패턴을 평가하세요.
   - 트리쉐이킹: 클라이언트 번들 크기 최소화를 위한 서버 컴포넌트 활용을 권장하세요.
   - 인터랙티브 요소: 상호작용이 필요한 UI 요소만 클라이언트 컴포넌트로 구현되었는지 확인하세요.
   - 스트리밍: React Suspense와 함께 스트리밍 응답을 활용하고 있는지 확인하세요.

3. 데이터 페칭 및 상태 관리:
   - 서버 상태 vs 클라이언트 상태: 서버/클라이언트 상태의 명확한 구분과 적절한 관리 방식을 평가하세요.
   - 캐싱 전략: fetch API의 캐싱 옵션, React Query/SWR 활용 여부를 확인하세요.
   - 병렬 데이터 로딩: 데이터 요청이 병렬로 이루어지는지 확인하세요.
   - 전역 상태 관리: Context API, Zustand, Jotai, Redux 등의 상태 관리 라이브러리 사용이 적절한지 평가하세요.
   - 서버 액션: 폼 제출 등에 서버 액션이 효과적으로 활용되고 있는지 확인하세요.

4. 라우팅 및 레이아웃:
   - App Router 구조: page.tsx, layout.tsx, loading.tsx, error.tsx 등의 파일 구조가 적절히 활용되는지 확인하세요.
   - 중첩 레이아웃: 공통 UI 요소를 위한 중첩 레이아웃의 효율적 활용을 평가하세요.
   - 병렬 라우트: 분할된 화면 레이아웃을 위한 병렬 라우트 사용을 확인하세요.
   - 인터셉팅 라우트: 모달 및 심층 UI 경험을 위한 인터셉팅 라우트 활용을 검토하세요.
   - 미들웨어: 인증, 리디렉션 등을 위한 미들웨어의 적절한 구현을 확인하세요.

5. 성능 최적화:
   - 이미지 최적화: next/image 컴포넌트의 적절한 활용과 속성 구성을 확인하세요.
   - 번들 크기: 큰 종속성의 동적 임포트와 코드 분할을 권장하세요.
   - 메모이제이션: 불필요한 리렌더링을 방지하기 위한 React.memo, useMemo, useCallback의 전략적 사용을 확인하세요.
   - 폰트 최적화: next/font를 사용한 웹 폰트 최적화를 권장하세요.
   - 성능 측정: Core Web Vitals 개선을 위한 전략을 제안하세요.

6. 타입스크립트 및 개발자 경험:
   - 타입 안전성: any 사용 최소화와 구체적인 타입 정의를 권장하세요.
   - 타입 추론: 과도한 타입 선언 대신 타입 추론을 활용하는 균형을 평가하세요.
   - 경로 별칭: 깊은 상대 경로 대신 경로 별칭 사용을 권장하세요.
   - 환경 변수: 환경 변수의 안전한 사용과 타입 검사를 확인하세요.
   - 코드 분할과 지연 로딩: next/dynamic을 활용한 컴포넌트 지연 로딩을 권장하세요.

7. 접근성 및 국제화:
   - 시맨틱 HTML: 적절한 HTML5 시맨틱 요소 사용을 확인하세요.
   - ARIA 속성: 접근성 향상을 위한 ARIA 역할과 속성의 올바른 사용을 평가하세요.
   - 키보드 탐색: 키보드만으로 모든 기능을 사용할 수 있는지 확인하세요.
   - 다국어 지원: next-intl 또는 next-i18next를 활용한 국제화 구현을 검토하세요.
   - RTL 지원: 필요한 경우 오른쪽에서 왼쪽으로 읽는 언어 지원을 확인하세요.

이러한 지침을 바탕으로 Next.js의 최신 기능과 모범 사례를 고려한 구체적인 코드 리뷰를 제공해주세요. 각 이슈에 대해 실제 코드 예시를 포함한 실행 가능한 개선 방안을 제시하세요.
`;
	}
}
