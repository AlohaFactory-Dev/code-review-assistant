import type { PromptTemplate, ReviewContext } from "../types";
import { BasePromptTemplate } from "./base";

export class FastApiPromptTemplate implements PromptTemplate {
	generatePrompt(context: ReviewContext): string {
		// Start with the base prompt
		const basePrompt = new BasePromptTemplate().generatePrompt(context);

		// Add FastAPI-specific guidance
		return `${basePrompt}

FastAPI 프로젝트 관련 추가 지침:

1. API 설계 및 구조:
   - 엔드포인트 구성: RESTful 원칙 준수 여부와 일관된 URL 패턴을 평가하세요.
   - 라우터 구성: 도메인/기능별로 적절히 분리된 라우터 구조를 확인하세요.
   - 의존성 주입: FastAPI의 Depends를 활용한 의존성 주입 패턴이 효과적으로 구현되었는지 검토하세요.
   - 응답 모델: 명확하게 정의된 응답 모델과 상태 코드 사용을 확인하세요.
   - 버전 관리: API 버전 관리 전략이 구현되었는지 평가하세요.

2. Pydantic 모델 및 데이터 검증:
   - 스키마 설계: 입력/출력 모델이 명확하게 정의되고 적절한 필드 타입을 사용하는지 확인하세요.
   - 검증 로직: 커스텀 validator와 필드 제약 조건이 적절히 사용되었는지 평가하세요.
   - 상속 패턴: 모델 상속을 통한 코드 재사용이 효과적으로 구현되었는지 확인하세요.
   - 문서화: 모델 필드에 대한 충분한 설명과 예시가 포함되었는지 검토하세요.
   - Config 활용: Pydantic 모델의 Config 클래스 옵션이 적절히 구성되었는지 확인하세요.

3. 비동기 패턴 및 성능:
   - 비동기 함수: async/await 패턴이 일관되게 적용되었는지 확인하세요.
   - 데이터베이스 접근: 비동기 ORM(SQLAlchemy, Tortoise, etc.)이 효과적으로 활용되는지 평가하세요.
   - BackgroundTasks: 장시간 실행 작업을 위한 BackgroundTasks 활용을 검토하세요.
   - 캐싱 전략: 응답 캐싱 메커니즘이 구현되었는지 확인하세요.
   - 데이터베이스 연결 풀링: 효율적인 연결 관리 구성을 평가하세요.

4. 보안 관행:
   - 인증 구현: OAuth2, JWT 또는 기타 인증 메커니즘의 올바른 구현을 검토하세요.
   - 권한 부여: 역할 기반 접근 제어나 세분화된 권한 시스템이 구현되었는지 확인하세요.
   - 입력 검증: 모든 사용자 입력이 Pydantic 모델로 적절히 검증되는지 확인하세요.
   - 시크릿 관리: 환경 변수나 안전한 설정 관리를 통한 비밀 정보 처리를 평가하세요.
   - CORS 설정: 보안 요구사항에 맞는 적절한 CORS 설정을 확인하세요.

5. 의존성 주입 및 테스트:
   - 의존성 설계: 서비스 레이어와 리포지토리 패턴이 테스트 가능한 방식으로 구현되었는지 평가하세요.
   - 모의 객체 사용: 테스트에서 외부 의존성을 모의 객체로 대체하는 패턴을 확인하세요.
   - 테스트 범위: 단위 테스트, 통합 테스트, E2E 테스트의 균형을 평가하세요.
   - 테스트 픽스처: 재사용 가능한 테스트 픽스처와 팩토리의 활용을 확인하세요.
   - 비동기 테스트: 비동기 엔드포인트에 대한 적절한 테스트 방법을 검토하세요.

6. 문서화 및 오류 처리:
   - Swagger/OpenAPI: 자동 생성된 API 문서의 품질과 완성도를 평가하세요.
   - 사용자 정의 예외: FastAPI의 HTTPException을 활용한 명확한 오류 처리를 확인하세요.
   - 로깅 전략: 구조화된 로깅과 적절한 로그 레벨 사용을 검토하세요.
   - 상태 코드: 표준 HTTP 상태 코드의 일관된 사용을 확인하세요.
   - 예외 미들웨어: 전역 예외 처리 미들웨어의 구현을 평가하세요.

7. 배포 및 운영:
   - 컨테이너화: Docker 또는 기타 컨테이너 솔루션의 효과적인 활용을 확인하세요.
   - 환경 설정: 개발, 테스트, 프로덕션 환경별 구성 관리를 평가하세요.
   - 헬스 체크: 애플리케이션 상태 모니터링을 위한 헬스 체크 엔드포인트 구현을 확인하세요.
   - 미들웨어 사용: 요청 처리 파이프라인의 미들웨어 구성을 검토하세요.
   - 성능 모니터링: 프로파일링 및 성능 측정 도구의 통합을 평가하세요.

이러한 지침을 바탕으로 FastAPI의 최신 기능과 모범 사례를 고려한 구체적인 코드 리뷰를 제공해주세요. 각 이슈에 대해 실제 코드 예시를 포함한 실행 가능한 개선 방안을 제시하세요.
`;
	}
}
